// reya-ui/src/features/roles/ReviewerPanel.tsx
import React, { useEffect, useMemo, useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";

const API = "http://127.0.0.1:8000";

type FileBlob = { path: string; contents: string };
type Finding = { path: string; notes: string[] };
type ReviewReply = { summary: string; findings: Finding[] };

type ReviewIssue = {
  id?: string;
  file?: string;
  line?: number;
  col?: number;
  severity?: "error" | "warning" | "info";
  message: string;
  suggestion?: string;
  rule?: string;
  source?: "eslint" | "ruff";
};

export default function ReviewerPanel() {
  // Simple single-file inputs (quick use)
  const [path, setPath] = useState("reya-ui/src/components/Old.tsx");
  const [contents, setContents] = useState("// TODO: fix issue\nconsole.log('debug')");

  // Advanced: multi-file JSON; if present, overrides single-file inputs
  const [filesJSON, setFilesJSON] = useState<string>("");

  const [status, setStatus] = useState<string>("");
  const [findings, setFindings] = useState<Finding[]>([]);
  const [summary, setSummary] = useState<string>("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // Optional lint
  const [lintIssues, setLintIssues] = useState<ReviewIssue[]>([]);
  const [lintStatus, setLintStatus] = useState<string>("");

  // Prefill from Coder → Reviewer (localStorage)
  useEffect(() => {
    let cancelled = false;
    try {
      const raw = localStorage.getItem("reviewer:prefill");
      if (raw) {
        const parsed = JSON.parse(raw);
        const files: FileBlob[] = parsed?.files || [];
        if (files.length && !cancelled) {
          setFilesJSON(JSON.stringify(files, null, 2));
          setPath(files[0].path);
          setContents(files[0].contents);
          setStatus("Loaded Coder → Reviewer handoff ✅");
        }
      } else {
        setStatus("No incoming handoff detected.");
      }
    } catch {
      /* ignore */
    }
    return () => {
      cancelled = true;
    };
  }, []);

  function parseFiles(): FileBlob[] | null {
    if (filesJSON.trim()) {
      try {
        const arr = JSON.parse(filesJSON) as FileBlob[];
        if (!Array.isArray(arr) || arr.length === 0) {
          setError("Files JSON must be a non-empty array.");
          return null;
        }
        const ok = arr.every((f) => f && typeof f.path === "string" && typeof f.contents === "string");
        if (!ok) {
          setError("Each file must have { path: string, contents: string }.");
          return null;
        }
        return arr;
      } catch (e: any) {
        setError(`Files JSON parse error: ${e.message || e}`);
        return null;
      }
    }
    if (!path.trim()) {
      setError("Provide a file path or Files JSON.");
      return null;
    }
    return [{ path, contents }];
  }

  async function runReview() {
    setError(null);
    setLoading(true);
    setFindings([]);
    setSummary("");
    setStatus("Reviewing…");

    const files = parseFiles();
    if (!files) {
      setLoading(false);
      setStatus("Fix input errors and retry.");
      return;
    }

    try {
      const res = await fetch(`${API}/roles/reviewer/review`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ files }),
      });
      const data: ReviewReply = await res.json();
      if (!res.ok) throw new Error((data as any)?.detail || "request failed");

      setFindings(data.findings || []);
      setSummary(data.summary || "");
      setStatus("Review complete ✅");
    } catch (e: any) {
      setError(e.message || "Review failed");
      setStatus("Review failed");
    } finally {
      setLoading(false);
    }
  }

  async function runLint() {
    setLintIssues([]);
    setLintStatus("Running lint…");
    try {
      const files = parseFiles();
      if (!files) {
        setLintStatus("Fix input errors and retry.");
        return;
      }
      const res = await fetch(`${API}/roles/reviewer/lint`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ files }),
      });
      const data = await res.json();
      if (!res.ok) throw new Error(data?.detail || "lint failed");
      setLintIssues(data.issues || []);
      setLintStatus(data.summary || "Lint completed");
    } catch (e: any) {
      setLintStatus(e.message || "Lint failed");
    }
  }

  function sendToFixer() {
    const files = parseFiles();
    if (!files) {
      setError("Nothing to send: provide files first.");
      return;
    }
    const payload = {
      files,
      findings, // Fixer also accepts `issues`
      notes: summary || "Findings generated by Reviewer",
    };
    localStorage.setItem("reviewer:prefill", JSON.stringify(payload));
    setStatus("Sent to Fixer ✅");
    window.location.hash = "#/roles?tab=fixer";
  }

  const canSend = useMemo(() => {
    const haveFiles =
      (filesJSON.trim() && (() => { try { return Array.isArray(JSON.parse(filesJSON)); } catch { return false; } })()) ||
      !!path.trim();
    return haveFiles && (findings.length > 0 || !!summary);
  }, [filesJSON, path, findings.length, summary]);

  return (
    <Card className="ga-panel ga-outline">
      <CardContent className="space-y-3 p-4">
        <div className="flex items-center justify-between">
          </div>

        {status && <div className="text-sm ga-subtle">{status}</div>}
        {error && <div className="text-sm text-red-600">{error}</div>}

        <label className="grid gap-1">
          <span className="text-sm font-medium">Files (JSON) – optional</span>
          <Textarea
            className="min-h-32 font-mono text-sm"
            spellCheck={false}
            value={filesJSON}
            onChange={(e) => setFilesJSON(e.target.value)}
            placeholder='[{"path":"file.tsx","contents":"..."}]'
          />
        </label>
        <div className="text-xs ga-subtle">If JSON above is provided, it overrides the single-file inputs below.</div>

        <Input value={path} onChange={(e) => setPath(e.target.value)} placeholder="File path" />
        <Textarea
          className="min-h-40 font-mono text-sm"
          spellCheck={false}
          value={contents}
          onChange={(e) => setContents(e.target.value)}
          placeholder="// paste code here"
        />

        
          <Button className="ga-btn" disabled={loading} onClick={runReview}>
            {loading ? "Reviewing…" : "Run review"}
          </Button>
          <Button variant="outline" onClick={runLint}>
            Run lint (ESLint + Ruff)
          </Button>
          <Button variant="outline" disabled={!canSend} onClick={sendToFixer}>
            Send to Fixer
          </Button>
        

        {summary && <div className="text-sm bg-zinc-100 text-zinc-800 rounded p-2">{summary}</div>}

        {!!findings.length && (
          <div className="space-y-2">
            <h3 className="text-lg font-semibold">Findings</h3>
            <div className="grid gap-2">
              {findings.map((f, i) => (
                <div key={i} className="border rounded p-2">
                  <div className="text-xs font-mono bg-zinc-100 text-zinc-700 px-2 py-1 rounded">{f.path}</div>
                  <ul className="list-disc pl-6 text-sm mt-1">
                    {f.notes.map((n, j) => (
                      <li key={j}>{n}</li>
                    ))}
                  </ul>
                </div>
              ))}
            </div>
          </div>
        )}

        {!!lintIssues.length && (
          <div className="space-y-2">
            <h3 className="text-lg font-semibold">Lint Issues</h3>
            <div className="text-xs ga-subtle">{lintStatus}</div>
            <div className="grid gap-2">
              {lintIssues.map((iss, i) => (
                <div key={i} className="border rounded p-2">
                  <div className="text-xs font-mono bg-zinc-100 text-zinc-700 px-2 py-1 rounded">
                    {iss.file || "(unknown file)"} • {iss.severity?.toUpperCase() || "INFO"}
                    {typeof iss.line === "number" ? ` @${iss.line}${iss.col ? ":" + iss.col : ""}` : ""}
                    {iss.rule ? ` • ${iss.rule}` : ""}
                  </div>
                  <div className="text-sm mt-1">{iss.message}</div>
                  {iss.suggestion && <div className="text-xs mt-1 italic">Suggestion: {iss.suggestion}</div>}
                </div>
              ))}
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
}
